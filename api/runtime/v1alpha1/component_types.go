/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"github.com/cosmonic-labs/runtime-operator/api/condition"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	// ComponentConditionArtifact is true when the component artifact is ready to be consumed by hosts.
	ComponentConditionArtifact condition.ConditionType = "Artifact"
	// ComponentConditionSync is true when the all replicas are on the latest Component generation.
	ComponentConditionSync condition.ConditionType = "Sync"
	// ComponentConditionReplicaCount is true when the component has the correct number of replicas.
	ComponentConditionReplicaCount condition.ConditionType = "ReplicaCount"
	// ComponentConditionImportLink is true when all import links are created.
	ComponentConditionImportLink condition.ConditionType = "ImportLink"
	// ComponentConditionExportLink is true when all export links are created.
	ComponentConditionExportLink condition.ConditionType = "ExportLink"
	// ComponentConditionConfigReference is true when the component has the correct config references.
	ComponentConditionConfigReference condition.ConditionType = "ConfigReference"
)

type ComponentLinkItem struct {
	// +kubebuilder:validation:Required
	WIT LinkInterface `json:"wit"`
	// +kubebuilder:validation:Required
	Target LinkTarget `json:"target"`
	// +kubebuilder:validation:Optional
	// Optional field to specify the name of the link.
	// Autogenerated if not provided. See `LinkSpec.Name`.
	Name string `json:"name,omitempty"`
}

// ComponentSpec defines the desired state of Component.
type ComponentSpec struct {
	ComponentDefinition `json:",inline"`
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Minimum=1
	Replicas int `json:"replicas"`
}

type ComponentDefinition struct {
	// +kubebuilder:validation:Required
	Image string `json:"image"`
	// +kubebuilder:validation:Optional
	ImagePullSecret *corev1.LocalObjectReference `json:"imagePullSecret,omitempty"`
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Minimum=1
	Concurrency int `json:"concurrency,omitempty"`
	// +kubebuilder:validation:Optional
	AllHosts bool `json:"allHosts,omitempty"`
	// +kubebuilder:validation:Optional
	HostSelector metav1.LabelSelector `json:"hostSelector,omitempty"`
	// +kubebuilder:validation:Optional
	ConfigFrom []corev1.LocalObjectReference `json:"configFrom,omitempty"`

	// TODO(lxf): LinkPolicies

	// +kubebuilder:validation:Optional
	Imports []ComponentLinkItem `json:"imports,omitempty"`
	// +kubebuilder:validation:Optional
	Exports []ComponentLinkItem `json:"exports,omitempty"`
}

// ComponentStatus defines the observed state of Component.
type ComponentStatus struct {
	condition.ConditionedStatus `json:",inline"`
	// +kubebuilder:validation:Optional
	Replicas int `json:"replicas,omitempty"`
	// +kubebuilder:validation:Optional
	UnavailableReplicas int `json:"unavailableReplicas"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="REPLICAS",type=integer,JSONPath=`.spec.replicas`
// +kubebuilder:printcolumn:name="CONCURRENCY",type=integer,JSONPath=`.spec.concurrency`
// +kubebuilder:printcolumn:name="READY",type=string,JSONPath=`.status.conditions[?(@.type=="Ready")].status`
// +kubebuilder:printcolumn:name="AGE",type=date,JSONPath=".metadata.creationTimestamp"
// Component is the Schema for the components API.
type Component struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ComponentSpec   `json:"spec,omitempty"`
	Status ComponentStatus `json:"status,omitempty"`
}

// Implement the ConfigReferencer interface.
func (c *Component) ConfigRefs() []corev1.ObjectReference {
	refs := make([]corev1.ObjectReference, 0, len(c.Spec.ConfigFrom))
	for _, ref := range c.Spec.ConfigFrom {
		refs = append(refs, corev1.ObjectReference{Namespace: c.Namespace, Name: ref.Name})
	}
	return refs
}

func (c *Component) ConditionedStatus() *condition.ConditionedStatus {
	return &c.Status.ConditionedStatus
}

func (c *Component) InitializeConditionedStatus() {
	c.Status.SetConditions(
		condition.Condition{
			Type:   ComponentConditionArtifact,
			Status: condition.ConditionUnknown,
		},
		condition.Condition{
			Type:   ComponentConditionImportLink,
			Status: condition.ConditionUnknown,
		},
		condition.Condition{
			Type:   ComponentConditionExportLink,
			Status: condition.ConditionUnknown,
		},
		condition.Condition{
			Type:   ComponentConditionReplicaCount,
			Status: condition.ConditionUnknown,
		},
	)
}

// +kubebuilder:object:root=true

// ComponentList contains a list of Component.
type ComponentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Component `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Component{}, &ComponentList{})
}
