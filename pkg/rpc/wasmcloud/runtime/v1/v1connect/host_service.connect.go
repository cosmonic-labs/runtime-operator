// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wasmcloud/runtime/v1/host_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cosmonic-labs/runtime-operator/pkg/rpc/wasmcloud/runtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HostServiceName is the fully-qualified name of the HostService service.
	HostServiceName = "wasmcloud.runtime.v1.HostService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HostServiceComponentStartProcedure is the fully-qualified name of the HostService's
	// ComponentStart RPC.
	HostServiceComponentStartProcedure = "/wasmcloud.runtime.v1.HostService/ComponentStart"
	// HostServiceProviderStartProcedure is the fully-qualified name of the HostService's ProviderStart
	// RPC.
	HostServiceProviderStartProcedure = "/wasmcloud.runtime.v1.HostService/ProviderStart"
	// HostServiceWorkloadStatusProcedure is the fully-qualified name of the HostService's
	// WorkloadStatus RPC.
	HostServiceWorkloadStatusProcedure = "/wasmcloud.runtime.v1.HostService/WorkloadStatus"
	// HostServiceWorkloadStopProcedure is the fully-qualified name of the HostService's WorkloadStop
	// RPC.
	HostServiceWorkloadStopProcedure = "/wasmcloud.runtime.v1.HostService/WorkloadStop"
)

// HostServiceClient is a client for the wasmcloud.runtime.v1.HostService service.
type HostServiceClient interface {
	// Separate entrypoints for each workload type
	ComponentStart(context.Context, *connect.Request[v1.ComponentStartRequest]) (*connect.Response[v1.ComponentStartResponse], error)
	ProviderStart(context.Context, *connect.Request[v1.ProviderStartRequest]) (*connect.Response[v1.ProviderStartResponse], error)
	// For all workload types
	WorkloadStatus(context.Context, *connect.Request[v1.WorkloadStatusRequest]) (*connect.Response[v1.WorkloadStatusResponse], error)
	WorkloadStop(context.Context, *connect.Request[v1.WorkloadStopRequest]) (*connect.Response[v1.WorkloadStopResponse], error)
}

// NewHostServiceClient constructs a client for the wasmcloud.runtime.v1.HostService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hostServiceMethods := v1.File_wasmcloud_runtime_v1_host_service_proto.Services().ByName("HostService").Methods()
	return &hostServiceClient{
		componentStart: connect.NewClient[v1.ComponentStartRequest, v1.ComponentStartResponse](
			httpClient,
			baseURL+HostServiceComponentStartProcedure,
			connect.WithSchema(hostServiceMethods.ByName("ComponentStart")),
			connect.WithClientOptions(opts...),
		),
		providerStart: connect.NewClient[v1.ProviderStartRequest, v1.ProviderStartResponse](
			httpClient,
			baseURL+HostServiceProviderStartProcedure,
			connect.WithSchema(hostServiceMethods.ByName("ProviderStart")),
			connect.WithClientOptions(opts...),
		),
		workloadStatus: connect.NewClient[v1.WorkloadStatusRequest, v1.WorkloadStatusResponse](
			httpClient,
			baseURL+HostServiceWorkloadStatusProcedure,
			connect.WithSchema(hostServiceMethods.ByName("WorkloadStatus")),
			connect.WithClientOptions(opts...),
		),
		workloadStop: connect.NewClient[v1.WorkloadStopRequest, v1.WorkloadStopResponse](
			httpClient,
			baseURL+HostServiceWorkloadStopProcedure,
			connect.WithSchema(hostServiceMethods.ByName("WorkloadStop")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hostServiceClient implements HostServiceClient.
type hostServiceClient struct {
	componentStart *connect.Client[v1.ComponentStartRequest, v1.ComponentStartResponse]
	providerStart  *connect.Client[v1.ProviderStartRequest, v1.ProviderStartResponse]
	workloadStatus *connect.Client[v1.WorkloadStatusRequest, v1.WorkloadStatusResponse]
	workloadStop   *connect.Client[v1.WorkloadStopRequest, v1.WorkloadStopResponse]
}

// ComponentStart calls wasmcloud.runtime.v1.HostService.ComponentStart.
func (c *hostServiceClient) ComponentStart(ctx context.Context, req *connect.Request[v1.ComponentStartRequest]) (*connect.Response[v1.ComponentStartResponse], error) {
	return c.componentStart.CallUnary(ctx, req)
}

// ProviderStart calls wasmcloud.runtime.v1.HostService.ProviderStart.
func (c *hostServiceClient) ProviderStart(ctx context.Context, req *connect.Request[v1.ProviderStartRequest]) (*connect.Response[v1.ProviderStartResponse], error) {
	return c.providerStart.CallUnary(ctx, req)
}

// WorkloadStatus calls wasmcloud.runtime.v1.HostService.WorkloadStatus.
func (c *hostServiceClient) WorkloadStatus(ctx context.Context, req *connect.Request[v1.WorkloadStatusRequest]) (*connect.Response[v1.WorkloadStatusResponse], error) {
	return c.workloadStatus.CallUnary(ctx, req)
}

// WorkloadStop calls wasmcloud.runtime.v1.HostService.WorkloadStop.
func (c *hostServiceClient) WorkloadStop(ctx context.Context, req *connect.Request[v1.WorkloadStopRequest]) (*connect.Response[v1.WorkloadStopResponse], error) {
	return c.workloadStop.CallUnary(ctx, req)
}

// HostServiceHandler is an implementation of the wasmcloud.runtime.v1.HostService service.
type HostServiceHandler interface {
	// Separate entrypoints for each workload type
	ComponentStart(context.Context, *connect.Request[v1.ComponentStartRequest]) (*connect.Response[v1.ComponentStartResponse], error)
	ProviderStart(context.Context, *connect.Request[v1.ProviderStartRequest]) (*connect.Response[v1.ProviderStartResponse], error)
	// For all workload types
	WorkloadStatus(context.Context, *connect.Request[v1.WorkloadStatusRequest]) (*connect.Response[v1.WorkloadStatusResponse], error)
	WorkloadStop(context.Context, *connect.Request[v1.WorkloadStopRequest]) (*connect.Response[v1.WorkloadStopResponse], error)
}

// NewHostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHostServiceHandler(svc HostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hostServiceMethods := v1.File_wasmcloud_runtime_v1_host_service_proto.Services().ByName("HostService").Methods()
	hostServiceComponentStartHandler := connect.NewUnaryHandler(
		HostServiceComponentStartProcedure,
		svc.ComponentStart,
		connect.WithSchema(hostServiceMethods.ByName("ComponentStart")),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceProviderStartHandler := connect.NewUnaryHandler(
		HostServiceProviderStartProcedure,
		svc.ProviderStart,
		connect.WithSchema(hostServiceMethods.ByName("ProviderStart")),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceWorkloadStatusHandler := connect.NewUnaryHandler(
		HostServiceWorkloadStatusProcedure,
		svc.WorkloadStatus,
		connect.WithSchema(hostServiceMethods.ByName("WorkloadStatus")),
		connect.WithHandlerOptions(opts...),
	)
	hostServiceWorkloadStopHandler := connect.NewUnaryHandler(
		HostServiceWorkloadStopProcedure,
		svc.WorkloadStop,
		connect.WithSchema(hostServiceMethods.ByName("WorkloadStop")),
		connect.WithHandlerOptions(opts...),
	)
	return "/wasmcloud.runtime.v1.HostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HostServiceComponentStartProcedure:
			hostServiceComponentStartHandler.ServeHTTP(w, r)
		case HostServiceProviderStartProcedure:
			hostServiceProviderStartHandler.ServeHTTP(w, r)
		case HostServiceWorkloadStatusProcedure:
			hostServiceWorkloadStatusHandler.ServeHTTP(w, r)
		case HostServiceWorkloadStopProcedure:
			hostServiceWorkloadStopHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHostServiceHandler struct{}

func (UnimplementedHostServiceHandler) ComponentStart(context.Context, *connect.Request[v1.ComponentStartRequest]) (*connect.Response[v1.ComponentStartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasmcloud.runtime.v1.HostService.ComponentStart is not implemented"))
}

func (UnimplementedHostServiceHandler) ProviderStart(context.Context, *connect.Request[v1.ProviderStartRequest]) (*connect.Response[v1.ProviderStartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasmcloud.runtime.v1.HostService.ProviderStart is not implemented"))
}

func (UnimplementedHostServiceHandler) WorkloadStatus(context.Context, *connect.Request[v1.WorkloadStatusRequest]) (*connect.Response[v1.WorkloadStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasmcloud.runtime.v1.HostService.WorkloadStatus is not implemented"))
}

func (UnimplementedHostServiceHandler) WorkloadStop(context.Context, *connect.Request[v1.WorkloadStopRequest]) (*connect.Response[v1.WorkloadStopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasmcloud.runtime.v1.HostService.WorkloadStop is not implemented"))
}
