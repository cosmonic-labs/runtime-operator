// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts"
// @generated from file wasmcloud/runtime/v1/provider.proto (package wasmcloud.runtime.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Link } from "./link_pb";
import type { WorkloadStatus } from "./workload_pb";

/**
 * Describes the file wasmcloud/runtime/v1/provider.proto.
 */
export declare const file_wasmcloud_runtime_v1_provider: GenFile;

/**
 * @generated from message wasmcloud.runtime.v1.ProviderStartRequest
 */
export declare type ProviderStartRequest = Message<"wasmcloud.runtime.v1.ProviderStartRequest"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: map<string, string> annotations = 3;
   */
  annotations: { [key: string]: string };

  /**
   * @generated from field: string image = 4;
   */
  image: string;

  /**
   * @generated from field: bytes image_pull_secret = 5;
   */
  imagePullSecret: Uint8Array;

  /**
   * @generated from field: map<string, string> config = 6;
   */
  config: { [key: string]: string };

  /**
   * if we need secrets, altho i'd leave it out. the host does the xkey dance
   * locally.
   *
   * @generated from field: map<string, string> secrets = 7;
   */
  secrets: { [key: string]: string };

  /**
   * Component-to-provider links where this provider is the target
   * These represent interfaces that components will call on this provider
   *
   * @generated from field: repeated wasmcloud.runtime.v1.Link exports = 8;
   */
  exports: Link[];

  /**
   * Host-to-provider links
   * becomes part of HostData during provider start
   *
   * @generated from field: repeated wasmcloud.runtime.v1.Link imports = 9;
   */
  imports: Link[];
};

/**
 * Describes the message wasmcloud.runtime.v1.ProviderStartRequest.
 * Use `create(ProviderStartRequestSchema)` to create a new message.
 */
export declare const ProviderStartRequestSchema: GenMessage<ProviderStartRequest>;

/**
 * @generated from message wasmcloud.runtime.v1.ProviderStartResponse
 */
export declare type ProviderStartResponse = Message<"wasmcloud.runtime.v1.ProviderStartResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: wasmcloud.runtime.v1.WorkloadStatus status = 2;
   */
  status: WorkloadStatus;
};

/**
 * Describes the message wasmcloud.runtime.v1.ProviderStartResponse.
 * Use `create(ProviderStartResponseSchema)` to create a new message.
 */
export declare const ProviderStartResponseSchema: GenMessage<ProviderStartResponse>;

